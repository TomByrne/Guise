<?xml version="1.0" encoding="utf-8"?>
<class classpath="guise.skin.bitmap.Mani" >

	<meth name="install" static="true" public="true" scope="within" a-within="composure.core.ComposeItem">

		<var name="font" value="guise.platform.cross.FontRegistry.getBitmapFont('assets/fonts/Helvetica.fnt', TfSans)"/>

		<!-- imports -->
		<var name="TextureStyle" value="guise.skin.bitmap.TextureLayer.TextureStyle"/>
		<var name="TextLabelStyle" value="guise.skin.drawn.TextStyleLayer.TextLabelStyle"/>
		<var name="TextStyle" value="guise.accessTypes.ITextOutputAccess.TextStyle"/>
		<var name="TextModifier" value="guise.accessTypes.ITextOutputAccess.TextModifier"/>
		<var name="TextCase" value="guise.skin.drawn.TextStyleLayer.TextCase"/>
		<var name="AntiAliasType" value="guise.accessTypes.ITextOutputAccess.AntiAliasType"/>
		<var name="TextureInfo" value="guise.accessTypes.ITextureAccess.TextureInfo"/>

		<var name="SelectedState" value="guise.states.ControlStates.SelectedState"/>
		<var name="ButtonOverState" value="guise.states.ControlStates.ButtonOverState"/>
		<var name="ButtonDownState" value="guise.states.ControlStates.ButtonDownState"/>

		<!-- reused styles -->
		<var name="styleTransitioner" type="guise.skin.drawn.utils.DrawnStyleTrans"/>

		<var name="labelTextStyle" value="TextLabelStyle.Tls(TextStyle.Trs(font, 12, 0x737a87, [TextModifier.TmBold()]), false, TextCase.TcUpper, AntiAliasType.AaSmooth)"/>
		<var name="inputTextStyle" value="TextLabelStyle.Tls(TextStyle.Trs(font, 12, 0x737a87, [TextModifier.TmBold()]), true , TextCase.TcUpper, AntiAliasType.AaSmooth)"/>


		<!-- layers -->
		<meth name="buttonBacking" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'backing'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('ButtonUp',true), -1,-2,-6,-2)">
				<m-addStyle params="[ButtonOverState.OVER], TextureStyle.pad(TextureInfo.sprite('ButtonOver',true), -1,-2,-6,-2)"/>
				<m-addStyle params="[ButtonDownState.DOWN], TextureStyle.pad(TextureInfo.sprite('ButtonDown',true), -1,-2,-6,-2), 1"/>
				<m-addStyle params="[SelectedState.SELECTED], TextureStyle.pad(TextureInfo.sprite('ButtonDown',true), -1,-2,-6,-2), 2"/>
			</var>
		</meth>
		<meth name="inputTextBacking" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'backing'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('TextInput',true), -1,-2,-6,-2)">
			</var>
		</meth>
		<meth name="toggleBacking" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'backing'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('Track',true), -1,-1,-3,-1)">
				<m-addLayout params="null, guise.skin.values.Width*0.5-25, guise.skin.values.Height*0.5-13, 50, 26"/>
			</var>
		</meth>
		<meth name="sliderBacking" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'backing'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('Track',true), -1,-1,-3,-1)">
				<m-addLayout params="null, 0, guise.skin.values.Height*0.5-13, guise.skin.values.Width, 26"/>
			</var>
		</meth>

		<meth name="labelText" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextStyleLayer">
			 <var type="guise.skin.drawn.TextStyleLayer" name="layer" p-layerName="'labelText'" p-normalStyle="labelTextStyle">
				<m-addLayout params="null, (guise.skin.values.Width/2)-(guise.skin.values.TextWidth<guise.skin.values.Width)/2, (guise.skin.values.Height/2)-(guise.skin.values.TextHeight<guise.skin.values.Height)/2, guise.skin.values.TextWidth<guise.skin.values.Width, guise.skin.values.TextHeight<guise.skin.values.Height"/>
			</var> 
		</meth>
		<meth name="inputText" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextStyleLayer">
			<var type="guise.skin.drawn.TextStyleLayer" name="layer" p-layerName="'inputText'" p-normalStyle="inputTextStyle">
				<m-addLayout params="null, 8, (guise.skin.values.Height/2)-(guise.skin.values.TextHeight<(guise.skin.values.Height-10))/2, guise.skin.values.Width-16, guise.skin.values.TextHeight<(guise.skin.values.Height-10)"/>
			</var>
		</meth>

		<meth name="toggleHandle" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'controlHandle'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('ToggleRed'), -2,-2,-8,-2)">
				<m-addStyle params="[SelectedState.SELECTED], TextureStyle.pad(TextureInfo.sprite('ToggleGreen'), -2,-2,-8,-2)"/>

				<m-addLayout params="null, guise.skin.values.Width*0.5-25, guise.skin.values.Height*0.5-12, 24, 24"/>
				<m-addLayout params="[SelectedState.SELECTED], guise.skin.values.Width*0.5+1, guise.skin.values.Height*0.5-12, 24, 24"/>
			</var>
		</meth>
		<meth name="sliderHandle" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextureLayer">
			<var type="guise.skin.bitmap.TextureLayer" name="layer" p-layerName="'controlHandle'" p-normalStyle="TextureStyle.pad(TextureInfo.sprite('Progress',true), -2,-4,-8,-4)">
				<m-addLayout params="null, 4, guise.skin.values.Height*0.5-10, 18+(guise.skin.values.Width-26)*guise.controls.data.INumRange.valueNorm, 18"/>
			</var>
		</meth>

		<!-- core furnishers -->
		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.core.CoreTags.StageTag" addCall="addTrait" p-searchAscendants="true" p-searchDescendants="false">
			<m-addInst params="new guise.skin.bitmap.utils.TexturePack('assets/Mani.png', 'assets/Mani.xml')"/>
		</var>

		<!-- control furnishers -->
		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags" addCall="addTrait">
			<m-addInst params="styleTransitioner"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextButtonTag(true)" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','labelText']"/>
			</meth>
			<m-addFact params="labelText"/>
			<m-addFact params="buttonBacking"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextInputTag" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','inputText']"/>
			</meth>
			<m-addFact params="inputText"/>
			<m-addFact params="inputTextBacking"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextLabelTag" addCall="addTrait">
			<m-addFact params="labelText"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.ToggleButtonTag" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','controlHandle']"/>
			</meth>
			<m-addFact params="toggleHandle"/>
			<m-addFact params="toggleBacking"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.SliderTag(true)" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','controlHandle']"/>
			</meth>
			<m-addFact params="sliderHandle"/>
			<m-addFact params="sliderBacking"/>
		</var>
	</meth>
</class>