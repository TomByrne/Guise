<?xml version="1.0" encoding="utf-8"?>
<class classpath="guise.skin.drawn.Chutzpah" >

	<meth name="install" static="true" public="true" scope="within" a-within="composure.core.ComposeItem">

		<var name="font" value="guise.platform.cross.FontRegistry.getFont('assets/fonts/HelveticaNeueLTCom-Bd.ttf', TfSans)"/>

		<!-- imports -->
		<var name="StrokeStyle" value="guise.skin.drawn.utils.DrawnStyles.StrokeStyle"/>
		<var name="FillStyle" value="guise.skin.drawn.utils.DrawnStyles.FillStyle"/>
		<var name="BoxStyle" value="guise.skin.drawn.BoxLayer.BoxStyle"/>
		<var name="TextLabelStyle" value="guise.skin.drawn.TextStyleLayer.TextLabelStyle"/>
		<var name="TextStyle" value="guise.accessTypes.ITextOutputAccess.TextStyle"/>
		<var name="TextModifier" value="guise.accessTypes.ITextOutputAccess.TextModifier"/>
		<var name="TextCase" value="guise.skin.drawn.TextStyleLayer.TextCase"/>
		<var name="AntiAliasType" value="guise.accessTypes.ITextOutputAccess.AntiAliasType"/>
		<var name="HAlign" value="guise.skin.drawn.utils.DrawnStyles.HAlign"/>
		<var name="VAlign" value="guise.skin.drawn.utils.DrawnStyles.VAlign"/>
		<var name="Corners" value="guise.skin.drawn.BoxLayer.Corners"/>
		<var name="CornerStyle" value="guise.skin.drawn.BoxLayer.CornerStyle"/>
		<var name="FilterType" value="guise.accessTypes.IFilterableAccess.FilterType"/>
		<var name="ShapeStyle" value="guise.skin.drawn.SimpleShapeLayer.ShapeStyle"/>

		<var name="SelectedState" value="guise.states.ControlStates.SelectedState"/>
		<var name="SelectableState" value="guise.states.ControlStates.SelectableState"/>
		<var name="ButtonOverState" value="guise.states.ControlStates.ButtonOverState"/>
		<var name="ButtonDownState" value="guise.states.ControlStates.ButtonDownState"/>
		<var name="FocusState" value="guise.states.ControlStates.FocusState"/>

		<!-- reused styles -->
		<var name="styleTransitioner" type="guise.skin.drawn.utils.DrawnStyleTrans"/>

		<var name="normStroke" value="StrokeStyle.SsSolid(1, FillStyle.FsHLinearGradient([ { c:0xa5a5a5, a:1, fract:0 }, { c:0xdddddd, a:1, fract:1 } ]))"/>
		<var name="overStroke" value="StrokeStyle.SsSolid(1, FillStyle.FsHLinearGradient([ { c:0x959595, a:1, fract:0 }, { c:0xbbbbbb, a:1, fract:1 } ]))"/>
		<var name="normGradient" value="FillStyle.FsHLinearGradient([ { c:0xffffff, a:1, fract:0 }, { c:0xeeeeee, a:1, fract:1 } ])"/>
		<var name="overGradient" value="FillStyle.FsHLinearGradient([ { c:0xffffff, a:1, fract:0 }, { c:0xf3f3f3, a:1, fract:1 } ])"/>
		<var name="downGradient" value="FillStyle.FsHLinearGradient([ { c:0xdadada, a:1, fract:0 }, { c:0xececec, a:1, fract:1 } ])"/>
		<var name="blueGradient" value="FillStyle.FsHLinearGradient([ { c:0xdeefff, a:1, fract:0 }, { c:0xc8d7e5, a:1, fract:1 } ])"/>


		<var name="buttonFiltNorm" value="[FilterType.DropShadow(1, Math.PI/2, 2, 0x000000, 0.56)]"/>
		<var name="buttonFiltDown" value="[FilterType.DropShadow(1, Math.PI / 2, 4, 0x000000, 0.42, true)]"/>
		<var name="textFiltNorm" value="[FilterType.DropShadow(1, Math.PI/2, 1, 0xffffff, 0.65)]"/>



		<!-- reused layers -->
		<meth name="backingFilt" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.FilterLayer">
			<var type="guise.skin.drawn.FilterLayer" name="layer" p-layerName="'backing'" p-normalStyle="buttonFiltNorm">
				<m-addStyle params="[ButtonDownState.DOWN], buttonFiltDown"/>
			</var>
		</meth>
		<meth name="controlHandleFilt" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.FilterLayer">
			<var type="guise.skin.drawn.FilterLayer" name="layer" p-layerName="'controlHandle'" p-normalStyle="buttonFiltNorm">
				<m-addStyle params="[ButtonDownState.DOWN], buttonFiltDown"/>
			</var>
		</meth>
		<meth name="labelText" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextStyleLayer">
			<var type="guise.skin.drawn.TextStyleLayer" name="layer" p-layerName="'labelText'">
				<m-addStyle params="[], TextLabelStyle.Tls(TextStyle.Trs(font, 11, 0x8e8e8e, [TextModifier.TmBold()]), false, TextCase.TcUpper, AntiAliasType.AaSmooth)"/>
				<m-addLayout params="null, (guise.skin.values.Width/2)-(guise.skin.values.TextWidth<guise.skin.values.Width)/2, (guise.skin.values.Height/2)-(guise.skin.values.TextHeight<guise.skin.values.Height)/2, guise.skin.values.TextWidth<guise.skin.values.Width, guise.skin.values.TextHeight<guise.skin.values.Height"/>
			</var>
		</meth>


		<!-- control furnishers -->
		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags" addCall="addTrait">
			<m-addInst params="styleTransitioner"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextButtonTag(true)" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','labelText']"/>
			</meth>
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.Meas" m-setVal="guise.skin.values.TextWidth+24,(guise.skin.values.TextHeight+16)>25"/>
			</meth>
			<m-addFact params="labelText"/>
			<m-addFact params="backingFilt"/>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.FilterLayer">
				<var type="guise.skin.drawn.FilterLayer" name="layer" p-layerName="'labelText'" p-normalStyle="textFiltNorm">
				</var>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.BoxLayer">
				<var type="guise.skin.drawn.BoxLayer" name="layer" p-layerName="'backing'">
					<m-addStyle params="[], BoxStyle.BsCapsule(normGradient, normStroke)"/>
					<m-addStyle params="[SelectedState.SELECTED, ButtonOverState.OUT], BoxStyle.BsCapsule(downGradient, normStroke)"/>
					<m-addStyle params="[SelectedState.SELECTED, ButtonOverState.OVER], BoxStyle.BsCapsule(blueGradient, overStroke)"/>
					<m-addStyle params="[ButtonOverState.OVER, SelectedState.UNSELECTED], BoxStyle.BsCapsule(overGradient, overStroke)"/>
					<m-addStyle params="[ButtonDownState.DOWN, SelectableState.UNSELECTABLE], BoxStyle.BsCapsule(downGradient, SsNone), 1"/>
				</var>
			</meth>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.PanelTag" addCall="addTrait">
			<meth static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.BoxLayer" addCall="addFact">
				<var type="guise.skin.drawn.BoxLayer" name="layer" p-layerName="'backing'" p-normalStyle="BoxStyle.BsRect(FillStyle.FsSolid(0xececec), StrokeStyle.SsNone)">
				</var>
			</meth>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextLabelTag" addCall="addTrait">
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.Meas" m-setVal="guise.skin.values.TextWidth,guise.skin.values.TextHeight"/>
			</meth>
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.Meas" m-setVal="guise.skin.values.TextWidth,guise.skin.values.TextHeight"/>
			</meth>
			<m-addFact params="labelText"/>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.TextInputTag" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','inputText']"/>
			</meth>
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.Meas" m-setVal="guise.skin.values.TextWidth+24,(guise.skin.values.TextHeight+16)>25"/>
			</meth>

			<m-addFact params="backingFilt"/>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.TextStyleLayer">
				<var type="guise.skin.drawn.TextStyleLayer" name="layer" p-layerName="'inputText'">
					<m-addStyle params="[], TextLabelStyle.Tls(TextStyle.Trs(font, 11, 0x8e8e8e, [TextModifier.TmBold()]), true, TextCase.TcUpper, AntiAliasType.AaSmooth)"/>
					<m-addLayout params="null, 5, (guise.skin.values.Height/2)-(guise.skin.values.TextHeight<(guise.skin.values.Height-10))/2, guise.skin.values.Width-10, guise.skin.values.TextHeight<(guise.skin.values.Height-10)"/>
				</var>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.BoxLayer">
				<var type="guise.skin.drawn.BoxLayer" name="layer" p-layerName="'backing'">
					<m-addStyle params="[], BoxStyle.BsRectComplex(normGradient, normStroke, Corners.CSame(CornerStyle.CsCirc(5)))"/>
					<m-addStyle params="[FocusState.FOCUSED], BoxStyle.BsRectComplex(downGradient, overStroke, Corners.CSame(CornerStyle.CsCirc(5)))"/>
				</var>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.FilterLayer">
				<var type="guise.skin.drawn.FilterLayer" name="layer" p-layerName="'inputText'" p-normalStyle="textFiltNorm">
				</var>
			</meth>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.SliderTag(true)" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','controlHandle']"/>
			</meth>
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.SimpleMeas" m-set="50,16"/>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.SimpleShapeLayer">
				<var type="guise.skin.drawn.SimpleShapeLayer" name="layer" p-layerName="'controlHandle'">

					<m-addStyle params="[], ShapeStyle.SsMulti([ShapeStyle.SsEllipse(	normGradient, normStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), new guise.skin.values.Value(-8), new guise.skin.values.Value(-8)), ShapeStyle.SsEllipse(	FillStyle.FsSolid(0xc1c1c1), SsSolid(1, FillStyle.FsHLinearGradient([ { c:0x979797, a:1, fract:0 }, { c:0xfefefe, a:1, fract:1 } ])), new guise.skin.values.Value(5), new guise.skin.values.Value(5), new guise.skin.values.Value(-2.5), new guise.skin.values.Value(-2.5))])"/>

					<m-addStyle params="[ButtonOverState.OVER], ShapeStyle.SsMulti([ShapeStyle.SsEllipse(	overGradient, overStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), new guise.skin.values.Value(-8), new guise.skin.values.Value(-8)), ShapeStyle.SsEllipse(	FillStyle.FsSolid(0xc1c1c1), SsSolid(1, FillStyle.FsHLinearGradient([ { c:0x979797, a:1, fract:0 }, { c:0xfefefe, a:1, fract:1 } ])), new guise.skin.values.Value(5), new guise.skin.values.Value(5), new guise.skin.values.Value(-24.5), new guise.skin.values.Value(-2.5))])"/>

					<m-addLayout params="null, 4+guise.controls.data.INumRange.valueNorm(rangeChanged)*(guise.skin.values.Width-8), guise.skin.values.Height*0.5, 0, 0"/>
				</var>
			</meth>

			<m-addFact params="controlHandleFilt"/>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.BoxLayer">
				<var type="guise.skin.drawn.BoxLayer" name="layer" p-layerName="'backing'">
					<m-addStyle params="[], BoxStyle.BsCapsule(normGradient, normStroke)"/>

					<m-addLayout params="null, 0, guise.skin.values.Height*0.5-6, guise.skin.values.Width, 12"/>
				</var>
			</meth>
		</var>

		<var type="composure.utilTraits.Furnisher" p-concernedTraitType="guise.controls.ControlTags.ToggleButtonTag" addCall="addTrait">
			<meth addCall="addFact" ret="layerOrder" a-cause="Dynamic">
				<var name="layerOrder" type="guise.layer.LayerOrderer" p-sorting="['backing','controlHandle']"/>
			</meth>
			<meth addCall="addFact" ret="meas" a-cause="Dynamic">
				<var name="meas" type="guise.meas.IMeasurement.SimpleMeas" m-set="26,16"/>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.SimpleShapeLayer">
				<var type="guise.skin.drawn.SimpleShapeLayer" name="layer" p-layerName="'controlHandle'">

					<m-addStyle params="[], ShapeStyle.SsEllipse(	normGradient, normStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), guise.macro.ValueMacro.exec(guise.skin.values.Width*0.5-15), guise.macro.ValueMacro.exec(guise.skin.values.Height*0.5-9))"/>

					<m-addStyle params="[ButtonOverState.OVER, SelectedState.UNSELECTED], ShapeStyle.SsEllipse(	overGradient, overStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), guise.macro.ValueMacro.exec(guise.skin.values.Width*0.5-15), guise.macro.ValueMacro.exec(guise.skin.values.Height*0.5-9))"/>

					<m-addStyle params="[SelectedState.SELECTED, ButtonOverState.OUT], ShapeStyle.SsEllipse(	normGradient, normStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), guise.macro.ValueMacro.exec(guise.skin.values.Width*0.5-1), guise.macro.ValueMacro.exec(guise.skin.values.Height*0.5-9))"/>

					<m-addStyle params="[SelectedState.SELECTED, ButtonOverState.OVER], ShapeStyle.SsEllipse(	overGradient, overStroke, new guise.skin.values.Value(16), new guise.skin.values.Value(16), guise.macro.ValueMacro.exec(guise.skin.values.Width*0.5-1), guise.macro.ValueMacro.exec(guise.skin.values.Height*0.5-9))"/>

				</var>
			</meth>

			<m-addFact params="controlHandleFilt"/>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.FilterLayer">
				<var type="guise.skin.drawn.FilterLayer" name="layer" p-layerName="'backing'" p-normalStyle="buttonFiltDown">
				</var>
			</meth>

			<meth addCall="addFact" static="true" a-tag="Dynamic" ret="layer" ret-type="guise.skin.drawn.BoxLayer">
				<var type="guise.skin.drawn.BoxLayer" name="layer" p-layerName="'backing'">
					<m-addStyle params="[], BoxStyle.BsCapsule(normGradient, normStroke)"/>
					<m-addStyle params="[SelectedState.SELECTED], BoxStyle.BsCapsule(blueGradient, normStroke)"/>

					<m-addLayout params="null, guise.skin.values.Width*0.5-13, guise.skin.values.Height*0.5-6, 26, 12"/>
				</var>
			</meth>
		</var>

	</meth>
</class>